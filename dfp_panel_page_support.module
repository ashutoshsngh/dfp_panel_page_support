<?php
/**
 * @file
 * This module is used to override DFP(Doubleclick for publishers) ad tags
 * settings from panel page settings.
 */

/**
 * Implements hook_page_manager_variant_operations_alter().
 */
function dfp_panel_page_support_page_manager_variant_operations_alter(&$operations, $handler) {

  reset($operations['children']);
  $children_operations = array();
  while (list($key, $value) = each($operations['children'])) {
    $children_operations[$key] = $value;
    if ($key == 'context') {
      $children_operations['panel_ad_dfp_settings'] = array(
        'title' => t('DFP Tags'),
        'description' => t('Edit Dfp Tags'),
        'form' => 'dfp_panel_page_support_variant_form',
      );
    }
  }
  $operations['children'] = $children_operations;
}

/**
 * dfp_panel_page_support settings form.
 */
function dfp_panel_page_support_variant_form($form, &$form_state) {
  // Make sure that all the necessary files are included even on ajax callbacks.
  form_load_include($form_state, 'inc', 'dfp', 'dfp.admin');
  ctools_include('context-task-handler');
  ctools_include('context');

  $handler = &$form_state['handler'];
  $contexts = ctools_context_handler_get_all_contexts($form_state['task'], $form_state['subtask'], $handler);

  if (empty($handler->conf['dfp_settings_state'])) {
    $handler->conf['dfp_settings_state'] = '0';
  }

  if (empty($handler->conf['dfp_settings_adpath'])) {
    $handler->conf['dfp_settings_adpath'] = '';
  }

  if (empty($handler->conf['targeting'])) {
    $handler->conf['targeting'] = array();
  }

  $form['#tree'] = TRUE;
  $form['settings']['dfp_settings_state'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable DFP settings for this Variant'),
    '#default_value' => $handler->conf['dfp_settings_state'],
  );

  $form['settings']['dfp_settings_adpath'] = array(
    '#type' => 'textfield',
    '#title' => t('Ad Path'),
    '#default_value' => $handler->conf['dfp_settings_adpath'],
    '#maxlength' => 2000,
  );

  $targets = array_filter(array_map('array_filter', $handler->conf['targeting']));
  $existing_targeting = !empty($targets) ? $targets : array();
  _dfp_targeting_form($form['targeting_settings'], $existing_targeting);
  unset($form['targeting_settings']['tokens']);

  $rows = array();
  foreach ($contexts as $context) {
    foreach (ctools_context_get_converters('%' . check_plain($context->keyword) . ':', $context) as $keyword => $title) {
      $rows[] = array(
        check_plain($keyword),
        format_string('@identifier: @title', array('@title' => $title, '@identifier' => $context->identifier)),
      );
    }
  }

  $header = array(t('Keyword'), t('Value'));
  $form['contexts'] = array(
    '#type' => 'fieldset',
    '#title' => t('Substitutions'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#value' => theme('table', array('header' => $header, 'rows' => $rows)),
  );

  return $form;
}

/**
 * Dfp panel form submission.
 */
function dfp_panel_page_support_variant_form_submit($form, &$form_state) {
  $form_state['handler']->conf['dfp_settings_state'] = $form_state['values']['settings']['dfp_settings_state'];
  $form_state['handler']->conf['dfp_settings_adpath'] = $form_state['values']['settings']['dfp_settings_adpath'];
  $targets = array_filter(array_map('array_filter', $form_state['values']['targeting']));
  $form_state['handler']->conf['targeting'] = $targets;
}

/**
 * Implements hook_dfp_tag_alter().
 *
 * Alter the tag object just after it is loaded and the settings have been
 * loaded properly.
 *
 * @param type $tag
 */
function dfp_panel_page_support_dfp_tag_alter(&$tag) {
  ctools_include('context');
  $tasks = page_manager_get_current_page();
  if (isset($tasks['handler']) && !empty($tasks['handler']->conf['dfp_settings_state'])) {

    // IF dfp_settings_adpath is set for current page then change ad tag path.
    if($tasks['handler']->conf['dfp_settings_adpath']) {
      $adunit = ctools_context_keyword_substitute($tag->adunit, array(), $tasks['contexts']);
      $tag->adunit = strip_tags($adunit);
    }

    // If targeting value is set for current page then override and merge
    // ad target value.
    if(!empty($tasks['handler']->conf['targeting'])) {
      $page_target = $tasks['handler']->conf['targeting'];
      $target = array_merge($page_target, $tag->targeting);
      $temp = array();
      $output = array_filter($target, function ($v) use (&$temp) {
        if (in_array($v['target'], $temp)) {
          return FALSE;
        }
        else {
          array_push($temp, $v['target']);
          return TRUE;
        }
      });
      $tag->targeting = $output;
    }
  }
}

/**
 * Implements hook_dfp_target_alter().
 *
 * Alter a targeting key|value pair.
 *
 * @param type $target
 */
function dfp_panel_page_support_dfp_target_alter(&$target) {
  ctools_include('context');
  $tasks = page_manager_get_current_page();
    foreach ($target as $key => $value) {
      if (isset($tasks['handler']) && !empty($tasks['handler']->conf['dfp_settings_state'])) {
        // Replace context token.
        $newtarget = ctools_context_keyword_substitute($target['value'], array(), $tasks['contexts']);
        $target['value'] = strip_tags($newtarget);
      }
    }
}